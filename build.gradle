plugins {
    id 'fabric-loom' version '1.6.+'
    id 'maven-publish'
}

version = "${mod_version}-mc${minecraft_version}"
group = maven_group
archivesBaseName = archives_base_name

loom {
    accessWidenerPath = file("src/main/resources/plutonium.accesswidener")
}

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://jitpack.io" } // Mixin Extras
    maven { url = "https://api.modrinth.com/maven" } // Bluemap
}

dependencies {
    minecraft("com.mojang:minecraft:${minecraft_version}")

    mappings(loom.layered {
        it.officialMojangMappings { nameSyntheticMembers = false }
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    })

    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    modImplementation("maven.modrinth:bluemap:5.3-fabric-1.20")

    modImplementation("io.netty.incubator:netty-incubator-transport-classes-io_uring:0.0.15.Final")
    modImplementation("io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.15.Final:linux-x86_64")
    modImplementation("com.github.luben:zstd-jni:${zstd_version}")

    include("io.netty.incubator:netty-incubator-transport-classes-io_uring:0.0.15.Final") { transitive = false }
    include("io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.15.Final:linux-x86_64") { transitive = false }
    include("com.github.luben:zstd-jni:${zstd_version}") { transitive = false }
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version as String,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version,
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}


def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = archives_base_name

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archives_base_name}"}
    }
}